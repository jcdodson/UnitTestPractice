        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:
        -:    4:using std::string;
        -:    5:using std::vector;
        -:    6:
        -:    7:/*
        -:    8:  The function receives a string counts how many times the same character 
        -:    9:  occurs at the beginning of the string, before any other characters (or the
        -:   10:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   11:  'z' and any ASCII characters are allowed.
        -:   12:*/
function _ZN8PasswordC2Ev called 21 returned 100% blocks executed 53%
       21:   13:Password::Password(){
call    0 returned 21
       21:   14:	pass_history.push_back("ChicoCA-95929");
call    0 returned 21
call    1 returned 21
branch  2 taken 21 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 21
branch  5 taken 21 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 21
call    8 returned 21
call    9 never executed
call   10 never executed
       21:   15:}
call    0 never executed
        -:   16:
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 17 returned 100% blocks executed 100%
       17:   17:int Password::count_leading_characters(string phrase){
       17:   18:  int repetition = 1;
       17:   19:  int index = 0;
        -:   20:
       29:   21:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
call    0 returned 29
branch  1 taken 26 (fallthrough)
branch  2 taken 3
call    3 returned 26
call    4 returned 26
branch  5 taken 12 (fallthrough)
branch  6 taken 14
branch  7 taken 12
branch  8 taken 17 (fallthrough)
       12:   22:    repetition++;
       12:   23:    index++;
        -:   24:  }
       17:   25:  return repetition;
        -:   26:}
        -:   27:/*
        -:   28:bool Password::has_mixed_case(string phrase){
        -:   29:	bool lower = 0;
        -:   30:	bool upper = 0;
        -:   31:	int index = 0;
        -:   32:
        -:   33:	while(index < phrase.length()){
        -:   34:		if(isupper(phrase[index])){
        -:   35:			upper = 1;
        -:   36:		}
        -:   37:		if(islower(phrase[index])){
        -:   38:			lower = 1;
        -:   39:		}
        -:   40:		index++;
        -:   41:	}
        -:   42:		
        -:   43:	return (upper && lower);
        -:   44:}
        -:   45:*/
        -:   46:/*
        -:   47:bool Password::has_mixed_case(string pass){
        -:   48:  bool lower = false;
        -:   49:  bool upper = false;
        -:   50:  for(int i = 0; i < pass.size(); i++){
        -:   51:    if( pass[i] >= 'A' && pass[i] <= 'Z' ){
        -:   52:      upper = true;
        -:   53:    }
        -:   54:    else if( pass[i] < 'z'){
        -:   55:      lower = true;
        -:   56:    }
        -:   57:  }
        -:   58:  return upper && lower;
        -:   59:}
        -:   60:*/
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 17 returned 100% blocks executed 100%
       17:   61:bool Password::has_mixed_case(string phrase) {
       17:   62:  int index = 0;
       17:   63:  bool uppercheck = false;
       17:   64:  bool lowercheck = false;
        -:   65:
      143:   66:  while( index < phrase.length()){
call    0 returned 143
branch  1 taken 126
branch  2 taken 17 (fallthrough)
      126:   67:    if (isupper(phrase[index])) {
call    0 returned 126
branch  1 taken 27 (fallthrough)
branch  2 taken 99
       27:   68:      uppercheck = true;
        -:   69:    }
      126:   70:    if (islower(phrase[index])) {
call    0 returned 126
branch  1 taken 78 (fallthrough)
branch  2 taken 48
       78:   71:      lowercheck = true;
        -:   72:    }
      126:   73:    index++;
        -:   74:  }
        -:   75:
       17:   76:  if(uppercheck == true && lowercheck == true) {
branch  0 taken 14 (fallthrough)
branch  1 taken 3
branch  2 taken 13 (fallthrough)
branch  3 taken 1
       13:   77:    return true;
        -:   78:  } else {
        4:   79:    return false;
        -:   80:  }
        -:   81: }
        -:   82:
function _ZN8Password3setENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 11 returned 100% blocks executed 83%
       11:   83:void Password::set(string phrase){
        -:   84:	
       11:   85:	bool flag = true;
        -:   86:
       11:   87:	if(phrase.length() < 8){
call    0 returned 11
branch  1 taken 2 (fallthrough)
branch  2 taken 9
        2:   88:		flag = false;
        -:   89:	}
        -:   90:	
       11:   91:	if(count_leading_characters(phrase) > 3){
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 11
branch  5 taken 2 (fallthrough)
branch  6 taken 9
call    7 never executed
call    8 never executed
        2:   92:		flag = false;
        -:   93:	}
        -:   94:
       11:   95:	if(!has_mixed_case(phrase)){
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 11
branch  5 taken 1 (fallthrough)
branch  6 taken 10
call    7 never executed
        1:   96:		flag = false;
        -:   97:	}
        -:   98:
       14:   99:	for(int i = 0; i < pass_history.size()-1; i++){
call    0 returned 14
branch  1 taken 3
branch  2 taken 11 (fallthrough)
        3:  100:		if(phrase == pass_history[i]){
call    0 returned 3
call    1 returned 3
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        2:  101:			flag = false;
        -:  102:		}
        -:  103:	}
        -:  104:	
       11:  105:	if(flag){
branch  0 taken 6 (fallthrough)
branch  1 taken 5
        6:  106:		pass_history.push_back(phrase);
call    0 returned 6
        -:  107:	}
       11:  108:}
        -:  109:
function _ZN8Password12authenticateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 9 returned 100% blocks executed 100%
        9:  110:bool Password::authenticate(string phrase){
        9:  111:	return (phrase == pass_history[pass_history.size()-1]);
call    0 returned 9
call    1 returned 9
call    2 returned 9
        -:  112:}
        -:  113:
        -:  114:
